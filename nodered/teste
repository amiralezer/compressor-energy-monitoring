[
    {
        "id": "01b0505a415fb65e",
        "type": "tab",
        "label": "TRAB_DONE_ABC",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0d5390e74b5644a3",
        "type": "function",
        "z": "01b0505a415fb65e",
        "name": "",
        "func": "var random = Math.random();\nvar tzoffset = -3 * 60 * 60 * 1000;\nvar date = new Date(Date.now() + tzoffset);\n//var timestamp = date.toISOString().replace(/T/, ' ').replace(/\\..+/, '');\nvar timestamp = date.toISOString().replace(/T/, ' ').replace(/\\..+/, '.' + date.getMilliseconds().toString().padStart(3, '0'));\n\n//arredondando os valores; \nvar voltage = Math.random();\nvar current = Math.floor(Math.random() * 5);\n//var current = Math.random() ;\nvar power_W = Math.random();\nvar energy_WH = Math.random();\nvar power_factor_measured = Math.random();\nvar power_factor_calc = Math.random();\nvar phase_angle_measured = Math.random();\nvar phase_angle_calc = Math.random();\n\nif (voltage <= 350) {\n    // var csvString =\n    //     \"'\" + timestamp + \"',\" +\n    //     voltage + \",\" +\n    //     current + \",\" +\n    //     power_W + \",\" +\n    //     energy_WH + \",\" +\n    //     power_factor_measured + \",\" +\n    //     power_factor_calc + \",\" +\n    //     phase_angle_measured + \",\" +\n    //     phase_angle_calc;\n\n    var data = [timestamp\n    , voltage\n    , current\n    , power_W\n    , energy_WH\n    , power_factor_measured\n    , power_factor_calc\n    , phase_angle_measured\n    , phase_angle_calc]\n    return { payload: data };\n}\nelse\n    return { payload: \"Deu merda\" }\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 420,
        "wires": [
            [
                "25a124e5c907cfc7",
                "aa331526a6c7d3d8"
            ]
        ]
    },
    {
        "id": "25a124e5c907cfc7",
        "type": "file",
        "z": "01b0505a415fb65e",
        "name": "",
        "filename": "C:\\Users\\Brito\\OneDrive\\PC\\Arquivos\\UTFPR\\9Periodo\\Pi2\\temp\\data.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 870,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "379da5d6e168aa2e",
        "type": "function",
        "z": "01b0505a415fb65e",
        "name": "Buffer Data",
        "func": "if (!flow.buffer) {\n    flow.buffer = [];\n}\n\nflow.buffer.push(msg.payload);\n\nif (flow.buffer.length >= 10) {\n    var buffer = flow.buffer;\n    flow.buffer = null;\n    return {payload: buffer};\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 280,
        "wires": [
            [
                "4987f4769ea6c02b",
                "ecc72738ae0cd077"
            ]
        ]
    },
    {
        "id": "4987f4769ea6c02b",
        "type": "debug",
        "z": "01b0505a415fb65e",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 180,
        "wires": []
    },
    {
        "id": "6235d6568d1494a9",
        "type": "debug",
        "z": "01b0505a415fb65e",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 200,
        "wires": []
    },
    {
        "id": "e96f334bcdd38ba8",
        "type": "mysql",
        "z": "01b0505a415fb65e",
        "mydb": "97ed4455693c6226",
        "name": "",
        "x": 1210,
        "y": 280,
        "wires": [
            [
                "a6548a31c19b8a65"
            ]
        ]
    },
    {
        "id": "34b53b18a472f777",
        "type": "debug",
        "z": "01b0505a415fb65e",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 360,
        "wires": []
    },
    {
        "id": "d048403020eeec71",
        "type": "mqtt out",
        "z": "01b0505a415fb65e",
        "name": "",
        "topic": "compressorAlarm",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "89f97fc84cc201df",
        "x": 930,
        "y": 520,
        "wires": []
    },
    {
        "id": "ba8b51f23b1eb992",
        "type": "function",
        "z": "01b0505a415fb65e",
        "name": "condAlarm",
        "func": "var current = msg.payload.split(',')[2]; \nvar moment = msg.payload.split(',')[0];\n\n\nif (current < 1)\n    var newMsg = {\n        topic: \"Erro de funcionamento no Compressor\",\n        payload: \"Shit, the current is weird: \" \n                + current \n                + \" A\" \n                + \" , HorÃ¡rio: \"\n                + moment\n    }\n    return newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "9cd9de7323f5f5cb",
        "type": "debug",
        "z": "01b0505a415fb65e",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 480,
        "wires": []
    },
    {
        "id": "ac550b609bd6ff27",
        "type": "inject",
        "z": "01b0505a415fb65e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 420,
        "wires": [
            [
                "0d5390e74b5644a3"
            ]
        ]
    },
    {
        "id": "a6548a31c19b8a65",
        "type": "debug",
        "z": "01b0505a415fb65e",
        "name": "debug 6",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 380,
        "wires": []
    },
    {
        "id": "ecc72738ae0cd077",
        "type": "function",
        "z": "01b0505a415fb65e",
        "name": "function 2",
        "func": "var query = `INSERT INTO compressor_measurements (moment, voltage, \n            current, power_W, energy_WH, power_factor_measured, \n            power_factor_calc, phase_angle_measured, phase_angle_calc) VALUES`;\nvar variables =`(`;\nfor (let i = 0; i < msg.payload.length; i++) {\n\n    variables += msg.payload[i].split(',')[0] + ',' + \n        msg.payload[i].split(',')[1] + ',' + \n        msg.payload[i].split(',')[2] + ',' + \n        msg.payload[i].split(',')[3] + ',' + \n        msg.payload[i].split(',')[4] + ',' + \n        msg.payload[i].split(',')[5] + ',' + \n        msg.payload[i].split(',')[6] + ',' + \n        msg.payload[i].split(',')[7] + ',' + \n        msg.payload[i].split(',')[8] + ')';\n    if (i < msg.payload.length - 1) {\n        variables +=',('\n    }\n}\nmsg.topic = query + variables\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 280,
        "wires": [
            [
                "6235d6568d1494a9"
            ]
        ]
    },
    {
        "id": "fb890dff61d04fc2",
        "type": "function",
        "z": "01b0505a415fb65e",
        "name": "",
        "func": "function findIndexesBeforeIncreaseAndAfterDecrease(arr) {\n    let cycles = [];\n    let indexBeforeIncrease = null;\n\n    cycles.push(0);\n    cycles.push(arr.length - 1);\n    \n    for (let i = 0; i < arr.length; i++) {\n        let value = arr[i][2];\n\n        if (value > 1) {\n            cycles.push(i);\n        }\n\n        if (value >= 1 && indexBeforeIncrease === null) {\n            if (i !== 0) {\n                indexBeforeIncrease = i - 1;\n            }\n        }\n\n        if (value < 1 && indexBeforeIncrease !== null) {\n            cycles.push(indexBeforeIncrease);\n            cycles.push(i);\n            indexBeforeIncrease = null;\n        }\n    }\n\n    if (indexBeforeIncrease !== null) {\n        cycles.push(indexBeforeIncrease);\n    }\n\n    cycles = [...new Set(cycles)];\n\n    return cycles;\n}\n\nlet indexes = findIndexesBeforeIncreaseAndAfterDecrease(msg.payload);\nlet finalData = [];\n\n// let indexes = [];\n// let finalData = [];\nvar index = 0;\nvar value =0;\nconsole.log(msg.payload);\nconsole.log(msg.payload[0][2]);\n// indexes.push(findIndexesBeforeIncreaseAndAfterDecrease(msg.payload));\n// indexes.push(...findIndexesBeforeIncreaseAndAfterDecrease(msg.payload));\n\nfor (let i = 0; i < indexes.length; i++) {\n    index = indexes[i];\n    value = msg.payload[index];\n    finalData.push(value);\n}\nreturn { payload: finalData };\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 360,
        "wires": [
            [
                "379da5d6e168aa2e",
                "34b53b18a472f777"
            ]
        ]
    },
    {
        "id": "aa331526a6c7d3d8",
        "type": "function",
        "z": "01b0505a415fb65e",
        "name": "Buffer",
        "func": "if (!flow.buffer) {\n    flow.buffer = [];\n}\n\nflow.buffer.push(msg.payload);\n\nif (flow.buffer.length >= 10) {\n    var buffer = flow.buffer;\n    flow.buffer = null;\n    return { payload: buffer };\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 360,
        "wires": [
            [
                "fb890dff61d04fc2",
                "3671b2bfebd2aca2"
            ]
        ]
    },
    {
        "id": "3671b2bfebd2aca2",
        "type": "debug",
        "z": "01b0505a415fb65e",
        "name": "debug 7",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 220,
        "wires": []
    },
    {
        "id": "97ed4455693c6226",
        "type": "MySQLdatabase",
        "name": "",
        "host": "utfpr-pi2-compressor-monitor.mysql.database.azure.com",
        "port": "3306",
        "db": "pi2",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "89f97fc84cc201df",
        "type": "mqtt-broker",
        "name": "mosquittoRasp",
        "broker": "192.168.18.27",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    }
]
